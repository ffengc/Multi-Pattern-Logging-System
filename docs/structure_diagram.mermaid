classDiagram
    class logger{
        -String __logger_name;
        -std::atomic<logLevel::value> __limit_level; "Limit the level of log output"
        -formatter::ptr __formatter;
        -std::vector<logSink::ptr> __sinks;
        -std::mutex __mtx;
        +void debug(...);
        +void info(...);
        +void warning(...);
        +void error(...);
        +void fatal(...);
        -virtual void log(...);
    }
    class logLevel-value{
        +UNKNOW = 0,
        +DEBUG,
        +INFO,
        +WARNING,
        +ERROR,
        +FATAL,
        +OFF  
    }
    class syncLogger {
        -void log(...) override
    }
    class asyncLogger {
        -void log(...) override
        -other_functions()
    }
    syncLogger --|> logger
    asyncLogger --|> logger
    class logMessage {
        +time_t __ctime; "// Timestamp of when the log was generated"
        +logLevel::value __level; "// Log Level"
        +size_t __line; "// line number"
        +std::thread::id __tid; "// thread_id"
        +std::string __file; "// file name"
        +std::string __logger; "// logger name"
        +std::string __payload; "// message"
    }
    syncLogger --> logMessage : uses
    asyncLogger --> logMessage : uses

    class formatItem {
        <|-- messageFormatItem
        <|-- messageFormatItem 
        <|-- levelFormatItem 
        <|-- timeFormatItem 
        <|-- fileFormatItem
        <|-- lineFormatItem
        <|-- threadIdFormatItem 
        <|-- loggerFormatItem 
        <|-- tabFormatItem 
        <|-- newLineFormatItem
        <|-- otherFormatIte
    }
    
    class formatter {
        -std::string __pattern;
        -std::vector<formatItem::ptr> __items; 
        +void format(std::ostream& out, const logMessage& msg)
        +std::string format(const logMessage& msg)
        -bool parsePattern()
        -formatItem::ptr createItem(const std::string& key, const std::string& val)
    }

    logMessage --> formatter
    formatItem --> formatter

    class logSink {
        +void log(const char* data, size_t len)
    }

    formatter --> logSink : "sync, Directly output log information"
    formatter --> asyncLooper : "async, Asynchronous thread to complete sink operation"

    class asyncLooper {
        -std::mutex __mtx;
        -buffer __task_push;
        -buffer __task_pop;
        -std::thread __thread;
        +void push(task)
        +void stop()
    }

    asyncLooper --> logSink

    class rollSink {
        "The file is output in rolling format."
    }
    class fileSink {
        "Log output to the specified file"
    }
    class stdoutSink {
        "Log output to the stdout"
    }
    rollSink --|> logSink
    fileSink --|> logSink
    stdoutSink --|> logSink